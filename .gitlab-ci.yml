image: registry.gitlab.com/guided-explorations/containers/aws-cli-tools/aws-cli

before_script:
  - ls -ashl

after_script:
  - ls -ashl

stages:
  - resolve-template-list
  - test
  - cfn-changeset
  - cfn-deploy

variables:
  AWS_DEFAULT_REGION: 'us-east-1'
  #TEMPLATE_LIST: 'CloudFormationUltimateAWSASGLabKit.cf.yml'
  #if null, find all files containing *.cf.* in all subfolders and sort them in pathname order
  #if present, only:
  #  1. process the listed files (without requiring ''.cf.' in filename)
  #  2. in the order provided - will be processed 
  SERIALIZED_EXECUTION: ''
  #if null, submit all templates for synchronous execution, otherwise wait for each template to finish before submitting another
  CFNLINTARGS: '--ignore-checks W'
  # override to '' or other args in CI/CD Vars if desired 
  CF_1OSInstanceOSPlatform: 'Windows'
  CF_9AWSRetrieveLatestAWSOSAmiIdFromSSM: '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-ContainersLatest'

get-cf-list:
  stage: resolve-template-list
  script:
    - |
      echo "Figuring out the template list and storing it in cftemplates.lst"
      if [[ ! -n "$TEMPLATE_LIST" ]]; then
        echo "\$TEMPLATE_LIST is empty, finding and sorting all files in directory tree with pattern *.cf.* ..."
        TEMPLATE_LIST=$(find . -name '*.cf.*' -type f -printf "%P|" | sort -n -z)
      fi
      
      echo "Template list: $TEMPLATE_LIST"

      echo "$TEMPLATE_LIST" > cftemplates.lst

  artifacts:
    paths:
      - cftemplates.lst    

cf-lint:
  stage: test   
  script:
    - |
      #pip install cfn-lint
      echo "Linting all cloudformation files..."

      RESOLVED_TEMPLATE_LIST="$(cat cftemplates.lst)"
      echo "Template list: $RESOLVED_TEMPLATE_LIST"

      OIFS=$IFS;
      IFS="|";
      cffiles=($RESOLVED_TEMPLATE_LIST)
      IFS=$OIFS

      for cftemplate in "${cffiles[@]}"
      do
        echo "  ${cftemplate}"
        cfn-lint --template ${cftemplate} --region ${AWS_DEFAULT_REGION} ${CFNLINTARGS} --format junit > cfn-lint-test-results.xml || true
        cfn-lint --template ${cftemplate} --region ${AWS_DEFAULT_REGION} ${CFNLINTARGS}

      done

  artifacts:
    reports:
      junit: "*.xml"
    paths:
      - "*.xml"

checkov-iac-sast:
  stage: test
  image:
    name: bridgecrew/checkov:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - checkov -d . -o junitxml > checkov.test.xml

  artifacts:
    reports:
      junit: "checkov.test.xml"
    paths:
      - "checkov.test.xml"

.cf-changeset:
  stage: cfn-changeset
  script:
    - |
      #Not implmented yet.  Create change set, describe into artifact, delete?
      for i in $(printenv | sed 's;=.*;;' | grep 'CF_'); do cfparams="${cfparams} ParameterKey=${i#CF_},ParameterValue=${!i}"; done;
      echo $cfparams
      
      RESOLVED_TEMPLATE_LIST=$(cat cftemplates.lst)

      OIFS=$IFS;
      IFS="|";
      cffiles=($RESOLVED_TEMPLATE_LIST)
      IFS=$OIFS

      for cftemplate in "${cffiles[@]}"
      do
        ESCAPEDSTACKNAME="$(echo ${cftemplate} | sed 's/[\/\.]//g')-$CI_COMMIT_REF_NAME"
        if [[ ! -z ${SORT_AND_SERIALIZE} ]]; then
          aws cloudformation create-changeset --stack-name ${ESCAPEDSTACKNAME} --region ${AWS_DEFAULT_REGION} 
            --template-body file://${cftemplate} 
            --parameters $cfparams
        fi

cf-deploy:
  stage: cfn-deploy
  script:
    - |
      set -xv
      for i in $(printenv | sed 's;=.*;;' | grep 'CF_'); do cfparams="${cfparams} ParameterKey=${i#CF_},ParameterValue=${!i}"; done;
      echo "$cfparams"
      
      RESOLVED_TEMPLATE_LIST=$(cat cftemplates.lst)

      OIFS=$IFS;
      IFS="|";
      cffiles=($RESOLVED_TEMPLATE_LIST)
      IFS=$OIFS

      for cftemplate in "${cffiles[@]}"
      do
        #cftemplate=$(echo $cftemplateraw | sed 's/^\.\//')
        #cftemplate="$(pwd)/$cftemplate"
        echo "${cftemplate}" 
        ESCAPEDSTACKNAME="$(echo ${cftemplate} | sed 's/[\/\.]//g')-$CI_COMMIT_REF_NAME"

        echo -e "\nValidating template ..."
        aws cloudformation validate-template \
          --region ${AWS_DEFAULT_REGION} \
          --template-body file://${cftemplate} \

        if ! aws cloudformation describe-stacks --region ${AWS_DEFAULT_REGION} --stack-name ${ESCAPEDSTACKNAME} ; then

          echo -e "\nStack does not exist, creating ..."
          aws cloudformation create-stack \
            --region ${AWS_DEFAULT_REGION} \
            --stack-name ${ESCAPEDSTACKNAME} \
            --template-body file://${cftemplate} \
            --parameters $cfparams

          if [[ ! -z ${SERIALIZED_EXECUTION} ]]; then
            echo "Waiting for stack to be created ..."
            aws cloudformation wait stack-create-complete \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name ${ESCAPEDSTACKNAME} 
          fi

        else
          echo -e "\nStack exists, attempting update ..."

          set +e
          update_output=$( aws cloudformation update-stack \
            --region ${AWS_DEFAULT_REGION} \
            --stack-name ${ESCAPEDSTACKNAME} \
            --template-body file://${cftemplate} \            
            --parameters $cfparams  2>&1)
          status=$?
          set -e

          echo "$update_output"

          if [ $status -ne 0 ] ; then
            # Dont fail for no-op update
            if [[ $update_output == *"ValidationError"* && $update_output == *"No updates"* ]] ; then
              echo -e "\nFinished create/update - no updates to be performed"
              exit 0
            else
              exit $status
            fi
          fi

          if [[ ! -z ${SERIALIZED_EXECUTION} ]]; then
            echo "Waiting for stack update to complete ..."
            aws cloudformation wait stack-update-complete \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name ${ESCAPEDSTACKNAME}
          fi
        fi
      done    
