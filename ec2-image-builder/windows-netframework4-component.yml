
#  From: GitLab HA Scaling Runner Vending Machine for AWS EC2 ASG (https://gitlab.com/guided-explorations/aws/gitlab-runner-autoscaling-aws-asg/)
#  EC2 Image Builder 'Component' for Windows Shell GitLab Runner
#   Be sure to configure AWS built in component 'chocolatey' and have it run before this one.
# Use a large disk volume because Visual Studio is large (probably 300-500GB) the default disk size for 
#   Windows is 30GB and Visual Studio installer does not properly bubble up the error that there is 
#   insufficient disk space to the chocolately log. Instead chocolatey errors with an exit code of '1'
# This component does not install GitLab runner because you always want the latest and it is very quick to install
#   The companion automation ASG automation 
#   Dynamically installs the runner due to those two reasons.
# Tested with Windows 2016

name: GitLab Runner Windows Shell Runner for .NET 4 Builds
description: GitLab Runner Windows Shell Runner for .NET 4 Builds
schemaVersion: 1.0

phases:
  - name: build
    steps:
      - name: NET4BuildEnvironment
        action: ExecutePowerShell
        inputs:
          commands:
            - # Must have git preinstalled for GitLab Runner
            - choco install -y git --version=2.30.0 -params '"/GitOnlyOnPath"' -force
            - choco install -y visualstudio2019buildtools --package-parameters " --allWorkloads --includeRecommended --includeOptional --passive --locale en-US --noUpdateInstaller"
            - #choco install -y visualstudio2017-workload-netcorebuildtools
            - #choco install -y visualstudio2017-workload-nodebuildtools
            - #choco install -y visualstudio2017-workload-vctools
            - #choco install -y visualstudio2017-workload-manageddesktopbuildtools
            - choco install -y visualstudio2017-workload-webbuildtools
            - choco install -y jq nuget.commandline
            - write-host "Put some really old web runtimes down for Nopcommerce so we can build tag 'release-3.90' for a dotnet 4.x version."
            - write-host "Original information for this hack from: https://medium.com/@udomsak/note-setup-build-server-environment-for-old-visual-studio-2010-project-ccb634dade85"
            - nuget install MSBuild.Microsoft.VisualStudio.Web.targets -source https://api.nuget.org/v3/index.json -version 11.0.2.1 -output $env:public
            - mkdir "${env:ProgramFiles`(x86`)}\MSBuild\Microsoft\VisualStudio\v11.0"
            - copy-item "C:\Users\Public\MSBuild.Microsoft.VisualStudio.Web.targets.11.0.2.1\tools\VSToolsPath\*" “${env:ProgramFiles`(x86`)}\MSBuild\Microsoft\VisualStudio\v11.0” -recurse
            
# Troubleshooting:
# Summary of all Chocolatey Installs: get-content $env:ProgramData\chocolatey\logs\chocolatey.log | sls "The install of "
# Location of logs from installers within chocolatey: dir $env:windir\temp\chocolatey\
# Find errors in all vs logs: Select-String -Path $env:windir\temp\chocolatey\*.log -Pattern 'Error'

#The following is a validation component that can be run during EC2 Image Builder Validations
name: GitLab Runner Windows Shell Runner for .NET Builds Validation Test
description: GitLab Runner Windows Shell Runner for .NET Builds Validate Test
schemaVersion: 1.0

phases:
  - name: test
    steps:
      - name: NET4BuildAgentTest
        action: ExecutePowerShell
        inputs:
          commands:
            - write-host ('git','dotnet','nuget','jq') | foreach { if (-not (Get-Command $psitem -ErrorAction SilentlyContinue)) { echo "$psitem did not install correctly."; exit 5 }}
            - if (-not (test-path 'C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v11.0\Web\Microsoft.Web.Publishing.targets'))  { echo "Webtargets did not install correctly."; exit 5 }
